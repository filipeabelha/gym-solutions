#include <bits/stdc++.h>
using namespace std;

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define cl(x, v) memset((x), (v), sizeof(x))
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define _ << ", " <<
#define ld long double

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<vi> vii;

const ld EPS = 1e-9, PI = acos(-1.);
const ll LINF = 0x3f3f3f3f3f3f3f3f, LMOD = 1011112131415161719ll;
const int INF = 0x3f3f3f3f, MOD = 1e9+7;
const int N = 1e5+5;

typedef long double type;

bool ge(type x, type y) { return x + EPS > y; }
bool le(type x, type y) { return x - EPS < y; }
bool eq(type x, type y) { return ge(x, y) and le(x, y); }

struct point {
    type x, y;

    point() : x(0), y(0) {}
    point(type x, type y) : x(x), y(y) {}

    point operator -() { return point(-x, -y); }
    point operator +(point p) { return point(x+p.x, y+p.y); }
    point operator -(point p) { return point(x-p.x, y-p.y); }

    point operator *(type k) { return point(k*x, k*y); }
    point operator /(type k) { return point(x/k, y/k); }

    type operator *(point p) { return x*p.x + y*p.y; }
    type operator %(point p) { return x*p.y - y*p.x; }

    // o is the origin, p is another point
    // dir == +1 => p is clockwise from this
    // dir ==  0 => p is colinear with this
    // dir == -1 => p is counterclockwise from this
    int dir(point o, point p) {
        type x = (*this - o) % (p - o);
        return ge(x,0) - le(x,0);
    }

    bool on_seg(point p, point q) {
        if (this->dir(p, q)) return 0;
        return ge(x, min(p.x, q.x)) and le(x, max(p.x, q.x)) and
            ge(y, min(p.y, q.y)) and le(y, max(p.y, q.y));
    }

    ld abs() { return sqrt(x*x + y*y); }
    type abs2() { return x*x + y*y; }
    ld dist(point x) { return (*this - x).abs(); }
    type dist2(point x) { return (*this - x).abs2(); }

    // Project point on vector y
    point project(point y) { return y * ((*this * y) / (y * y)); }

    // Project point on line generated by points x and y
    point project(point x, point y) { return x + (*this - x).project(y-x); }

    ld dist_line(point x, point y) { return dist(project(x, y)); }

    ld dist_seg(point x, point y) {
        return project(x, y).on_seg(x, y) ? dist_line(x, y) :  min(dist(x), dist(y));
    }

    point rotate(ld a) {
        return point(cos(a)*x-sin(a)*y, sin(a)*x+cos(a)*y);
    }

    point rotate(point p) { // rotate around the argument from vector p
        ld hyp = p.abs();
        ld c = p.x / hyp;
        ld s = p.y / hyp;
        return point(c*x-s*y, s*x+c*y);
    }
};


int direction(point o, point p, point q) { return p.dir(o, q); }

point yes, no, a;
ld r;

int main () {
    scanf("%Lf%Lf%Lf%Lf%Lf", &r, &yes.x, &yes.y, &no.x, &no.y);
    if (yes.x == no.x and yes.y == no.y) printf("%.10Lf %.10Lf %.10Lf\n", yes.x+r/2, yes.y, r/2);
    else {
        point dif = yes-no;
        if (ge(dif.abs(), r)) printf("%.10Lf %.10Lf %.10Lf\n", yes.x, yes.y, r);
        else {
            a = yes + dif*r/(dif.abs());
            point ans = (a + no)/2;
            printf("%.10Lf %.10Lf %.10Lf\n", ans.x, ans.y, a.dist(no)/2);
        }
    }

    return 0;
}
